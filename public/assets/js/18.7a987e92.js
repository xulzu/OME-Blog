(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{232:function(t,a,s){"use strict";s.r(a);var e=s(10),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"vue中使用v-model指令与-sync修饰符在组件间进行数据的-双向绑定"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue中使用v-model指令与-sync修饰符在组件间进行数据的-双向绑定"}},[t._v("#")]),t._v(" Vue中使用v-model指令与.sync修饰符在组件间进行数据的“双向绑定”")]),t._v(" "),s("h2",{attrs:{id:"摘要"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#摘要"}},[t._v("#")]),t._v(" 摘要")]),t._v(" "),s("blockquote",[s("p",[t._v("    在组件间进行数据的双向绑定能够使得被绑定的数据在某一个组件发生变化时，在其他组件能够同步反映出来。这样不仅能有助于代码的阅读和理解，同时还能使得书写代码用更少的语句。据本人目前的使用经验，存在两种方式可以方便进行组件间的数据进行“双向绑定”。一是使用"),s("code",[t._v("v-model")]),t._v("指令搭配上组件内的model属性。二是在调用子组件时使用"),s("code",[t._v(".sync")]),t._v("修饰符。这两种方式都是一种"),s("strong",[t._v("语法糖")]),t._v("。可以理解为这两种方式都是在子组件内绑定的数据发生变化时在子组件中使用"),s("code",[t._v("this.$emit('eventName',newVal)")]),t._v("回调了父组件上的"),s("code",[t._v("eventName")]),t._v("方法来对父组件中的数据进行修改。")])]),t._v(" "),s("h2",{attrs:{id:"关键词"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关键词"}},[t._v("#")]),t._v(" 关键词")]),t._v(" "),s("blockquote",[s("p",[t._v("v-model, .sync修饰符,双向绑定")])]),t._v(" "),s("h2",{attrs:{id:"v-model的使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#v-model的使用"}},[t._v("#")]),t._v(" v-model的使用")]),t._v(" "),s("blockquote",[s("p",[t._v("    在vue中，input,checkbox,select等元素可以使用v-model进行数据的双向绑定。如在"),s("code",[t._v("<input>")]),t._v("标签上使用v-model标签。")]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("input")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("type")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("text"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("v-model")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" //v-model形式\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("input")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("type")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("text"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v(":value")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("@input")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("name=$event.target.value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("//与之等价\n")])])]),s("p",[t._v("    从上面的代码中我们可以看出，v-model指令可以从某种程度上认为和使用两个指令"),s("code",[t._v("v-bind")]),t._v("和"),s("code",[t._v("v-on")]),t._v(" 时是等价的。在使用两个指令时，在所绑定的数据发生变化时，内部通过"),s("code",[t._v("this.$emit()")]),t._v("的方式来调用外部的方法对数据进行双向的更改。   在"),s("code",[t._v("input")]),t._v("标签中，内部触发的是"),s("code",[t._v("this.$emit('input',newval)")]),t._v(" 。在不同标签v-model所触发的方法有所差别。借鉴于此，我们可以在组件之间使用v-model，"),s("strong",[t._v("默认时，v-model会使用组件中的value值和派发组件中input事件")]),t._v("，观察上面使用v-bind和v-on来实现v-model的例子。不难发现子组件中需要通过props接受一个来自父组件的数据进行绑定。同时需要"),s("code",[t._v("this.$emit()")]),t._v("来派发某个事件。借助vue组件的"),s("a",{attrs:{href:"https://cn.vuejs.org/v2/api/#model",target:"_blank",rel:"noopener noreferrer"}},[t._v("model属性"),s("OutboundLink")],1),t._v(" 。可以自定义组件中v-model所绑定的属性以及所要派发的事件。")]),t._v(" "),s("p",[t._v("在子组件中")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//--Son.vue")]),t._v("\nmodel"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tprop"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"myval"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\tevent"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"modelclick"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nprops"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" myval"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" String "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nmethods"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("btnClick")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n           \t\t "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//注意这里派发的事件要和model.event一致")]),t._v("\n\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("$emit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"modelclick"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("myval"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n")])])]),s("p",[t._v("这样设置以后，当我们在父组件引用了子组件后。子组件就能够借助"),s("code",[t._v('this.$emit("modelclick", this.myval);')]),t._v("同步修改父组件中的v-model所绑定的数据。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Father.vue")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Son v"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("model"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'name'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//此时父组件中的name就会被双向绑定。")]),t._v("\n")])])])]),t._v(" "),s("h2",{attrs:{id:"sync-修饰符的使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sync-修饰符的使用"}},[t._v("#")]),t._v(" .sync 修饰符的使用")]),t._v(" "),s("blockquote",[s("p",[t._v(".sync修饰符的理解和v-model类似。不同的地方在于v-model会默认派发‘input’事件。假设在父组件中使用了   "),s("code",[t._v("<son :dialogVisible.sync='dialogVisible' >")]),t._v("    那么.sync修饰符所派发的是"),s("code",[t._v("update:dialogVisible")]),t._v('**("update:"加上v-bind绑定的数据名)**事件 。具体示例如下  ：')]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//father.vue")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("son  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("dialogVisible"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sync"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'visible'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("son  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("dialogVisible"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'value'")]),t._v("  @update"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("dialogVisible"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'v=>dialogVisible=v'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//与上面等价")]),t._v("\n")])])]),s("p",[t._v("观察父组件中的.sync修饰符的展开。需要在子组件中通过"),s("code",[t._v("this.$emit('update:dialogVisible'，newValue)")]),t._v("派发事件以同步修改修改父组件中的值 .这里我列举一个我常常在使用element-ui时，当子组件中是一个el-dialog时的例子。我普遍用在当点击某个按钮时弹出某个自定义弹窗的场景。")]),t._v(" "),s("div",{staticClass:"language-vue extra-class"},[s("pre",{pre:!0,attrs:{class:"language-vue"}},[s("code",[t._v("//son.vue\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("template")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("el-dialog")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v(":visible.sync")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("visible"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("width")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("670px"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("el-dialog")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("template")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v('\nexport default {\n\tprops: {\n\t\tdialogVisible: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false\n\t\t}\n\t},\n\tcomputed: {\n\t\tvisible: {\n\t\t\tget() {\n\t\t\t\treturn this.dialogVisible;\n\t\t\t},\n\t\t\tset(newval) {\n\t\t\t\tthis.$emit("update:dialogVisible", newval);\n\t\t\t}\n\t\t}\n\t}\n}\n')])])]),s("p",[t._v("注意到子组件中关于dialogVisible的使用。由于computed中可以设置get和set。因此这里借助get和set将父组件中的dialogVisible和子组件中用来控制dialog显隐的visible进行一个双向绑定。这样我们就不用在父组件上重新定义一个事件来进行派发。 因此当子组件中的弹窗被关闭时，因为visible的改变会触发set。最后触发"),s("code",[t._v('this.$emit("update:dialogVisible", newval);')]),t._v(" 来更新父组件上的用来控制子组件显示隐藏的dialogVisible。")])])])}),[],!1,null,null,null);a.default=n.exports}}]);